
Parte 3. Java-heranca-interfaces-polimorfismo

  * polimorfismo
    - Temos polimorfismo quando uma classe extende de outra ou também quando uma classe implementa uma interface.
    
    - Podemos comunicar com um objeto através de tipos de variáveis diferentes. Por exemplo, 
    se existir uma classe Gerente que seja filha de Funcionario, um objeto do tipo Gerente 
    pode ser referenciado com o tipo Funcionario também.

    - Por exemplo, se existir uma classe Gerente que seja filha de Funcionario, um objeto do tipo Gerente pode ser referenciado com o tipo Funcionario também.

  4. Herança e o uso construtores
    
    A herança possui baixo acoplamento, logo é fácil mudar uma classe mãe sem causar problemas nas classes filhas. A herança captura o que é comum e isola aquilo que é diferente entre classes.

    * A anotação @Override - Finalidade?
      
      É usada para sobrescrever o método da classe mãe, indicando que o método original foi alterado.
      https://pt.stackoverflow.com/questions/22913/qual-a-finalidade-da-override
  
    
  5.  Classes abstratas
      
    Uma classe abstrata representa um conceito, algo abstrato, e o compilador não permite instanciar um objeto dessa classe. Para instanciar é preciso criar primeiro uma classe filha não abstrata.Sempre está relacionado com o conceito de herança.
    
    Classes abstratas são úteis quando queremos utilizar comportamentos e atributos base em classes com comportamentos em comum.

    * Método Abastrato
      Trata-se de um método sem corpo, sem implementação.
      Método abstrato define apenas a assinatura (visibilidade, retorno, nome do método e parâmetros). Usamos métodos abstratos quando queremos "forçar" que um filho concreto (classe concreta) implemente um método.
      
  6. Interfaces
      
    É uma classe abstrata com todos os seus métodos abstratos.Não pode ter nada concreto,por exemplo, um atributo. Ela é um contrato onde quem assina se responsabiliza por implementar esses métodos (cumprir o contrato).
    
    Utilizando interfaces temos uma outra forma de conseguir polimorfismo sem herança.Com composições e interfaces teremos mais flexibilidade com nosso código, já que não nos prenderemos ao acoplamento que a herança propõe.

Java Parte 4: Entendendo excecoes 

  4. Checked e Unchecked

    Existe uma hierarquia grande de classes que representam exceções. 
    
    Por exemplo, ArithmeticException é filha de RuntimeException, que herda de Exception, que por sua vez é filha da classe mais ancestral das exceções, Throwable. 
    
    * Throwable 
      É a classe que precisa ser extendida para que seja possível jogar um objeto na pilha (através da palavra reservada throw)

      É na classe Throwable que temos praticamente todo o código relacionada às exceções, inclusive getMessage()e printStackTrace(). Todo o resto da hierarquia apenas possui algumas sobrecargas de construtores para comunicar mensagens específicas
    
      A hierarquia iniciada com a classe Throwable é dividida em exceções e erros. 
      
        * Exceções são usadas em códigos de aplicação. 
        * Erros são usados exclusivamente pela máquina virtual.

      A Classes que herdam de error são usadas para comunicar erros na máquina virtual. Desenvolvedores de aplicação não devem criar erros que herdam de Error.

    * StackOverflowError
      É um erro da máquina virtual para informar que a pilha de execução não tem mais memória.

    * Exceções 
      São separadas em duas grandes categorias: aquelas que são obrigatoriamente verificadas pelo compilador e as que não são verificadas.

      As primeiras são denominadas checked e são criadas através do pertencimento a uma hieraquia que não passe por RuntimeException.

      As segundas são as unchecked, e são criadas como descendentes de RuntimeException.
  
  5.  Aplicando exceções
    
    * Exceções:
        
      * Tipo: Checked
        Se você gosta de avisar aquele desenvolvedor que usará a sua classe, para que ele faça um tratamento, pois algumas exceções podem ocorrer, use checked. 
        
      * Tipo: Unchecked
        Se você acha que não precisa disso e que o desenvolvedor pode fazer o tratamento quando ele achar melhor, use unchecked.

  6. Finally e try with resources
      
    * Exceções Tipos:

      * IllegalStateException
        Indica que um objeto possui um estado inválido.

      * IllegalArgumentException
        Verificar os valores no construtor da classe.
        Exemplo: Agencia negativa
        
          Conta c = new ContaCorrente(-111, 222); //faz sentido? 
          
          Tratamento:
          if(agencia < 1) {
            throw new IllegalArgumentException("Agencia inválida");
          }

5. Java Parte 5: Pacotes e Java.lang

  2. Todos os modificadores de acesso
    
    Existem 4 níveis de visibilidade (de menor para maior):
      I. private (visível apenas na classe)      
      II. <<package private>> (visível na classe E em qualquer outro membro do mesmo pacote, podendo ser chamado de default)      
      III. protected (visível na classe E em qualquer outro membro do mesmo pacote e para qualquer filho)
      IV. public (visível em qualquer pacote)

  3. Distribuição do seu código
  
    * Java Doc 
      É uma documentação para desenvolvedores. Para gerar o java doc basta utilizar a rota no eclipe: "Project -> Generate Javadoc".

      Apenas os membros "públicos" são contemplados no javadoc. Outros membros (não públicos) são considerados detalhes da implementação e não podemos ser utilizados por outras classes.

      * Tag existentes no JavaDoc

        @author (usado na classe ou interface)
        @version (usado na classe ou interface)
        @param (usado no método e construtor)
        @return (usado apenas no método)
        @exception ou @throws (no método ou construtor)
        @see
        @since
        @serial
        @deprecated

    3.2 JAR
      Através de jars podemos facilitar o compartilhamento do nosso código entre equipes. No exclise, cliente com botão esquerdo em cima do projeto, e selecione a opção EXPORT, diversas opções de exportação serão exibidas, selecione aquela dentro do grupo java e dentro dele a opção JAR File clicando em "NEXT";

    5. Java Parte 5: Pacote e java.lang
      Sobrescrita é relacionado com a herança que não é o caso nesse exemplo. 

      Exemplo:
          boolean existe1 = Banco.existeBanco("CAIXA");
          boolean existe2 = Banco.existeBanco(394);
          
      Existem duas versões desse método que variam nos parâmetros, a primeira recebe uma String e a segunda recebe uma valor int.
  
Java Parte 6: Conhecendo o java.util
    
  Aula 3: Equals e Mais Listas  
    
    * LinkedList
      É uma lista duplamente "linkada".
      
      * Vantagem
        Inserção e remoção performática em qualquer posição, também no início
      
      * Desvantagem
        Acesso mais demorado pelo índice, é preciso pesquisar os elementos
    
    * ArrayList 
      Representa um array com redimensionamento dinâmico.
      
      * Vantagem
        Acesso fácil e performático pelo índice
      
      * Desvantagem
       Elementos precisam ser copiados quando não há mais capacidade (Apos cria um novo array)

  Aula 5: Vector e a interface Collection

    * Vector
      1) É threadsafe 
      2) Usa array
      3) Implementa a interface List

    * Interface java.util.Collection
      É a interface de todas as coleções        

  Aula 6: As classes Wrappers
  
    * Wrappers
      São classes que contém funcionalidades e encapsulam a variável de tipo primitivo. Permitem que um array de referencia trabalhe com dados primitivos para cada primitivo existe sua classe especifica. 
      
      Exemplo: 
        * int    (4 bytes) --> java.lang.Integer
        * double (8 bytes) --> java.lang.Double
        * float  (4 bytes) --> java.lang.Float
        * long   (8 bytes) --> java.lang.Long
        * short  (2 bytes) --> java.lang.Short
        * byte   (1 bytes) --> java.lang.Byte
        * char   (2 bytes) --> java.lang.Character
        * boolean          --> java.lang.Boolean

    * Parsing 
      É a conversão do String para um tipo específico

      * Integer.parseInt(diaComoTexto) 
        Devolve um primitivo          
      
      * Integer.valueOf(diaComoTexto)
        Devolve uma referencia
    
    * Boxing
      É a conversão de tipos primitivos em seu respectivo Wrapper correspondente.
      
      Exemplo:
        Boolean meuBoolean = true; 
        //a conversão é feita de forma automática para o boolean
        Integer meuInteger = 1203; 
        Double meuDouble = 10.20;

    * Unboxing Conversion
      É quando você deseja fazer o inverso do boxing, ou seja, deseja converter um objeto para um tipo primitivo.
      
      Exemplo:
        boolean a = new Boolean(“True”);
        char c = new Character(‘c’);
        byte b = new Byte(“1”);
        float f = new Float(1.0f);

  Aula 7: Ordenacao de lista

    * java.util.Comparator
       Parâmetro do método sort da lista e da classe Collections.
    
    * java.lang.Comparable
      Usado para definir a ordem natural dos elementos!
       
      * Ordem Natural
        É a ordem definida pelo próprio elemento da lista (Classe)
  
  Aula 8: Classes anônimas e lambdas

    * Funcion Object
      Um objeto que criamos para encapsular uma função ou método. As classes anônimas facilitam um pouco a criação desses objetos. 

    * Classe anônima e lambda
      É menos custoso criar uma classe, a partir da interface, e já criar o objeto, de forma direta, em unidade. Isso significa que, em vez de fazermos isso, que é um processo burocrático.
      
      Exemplo:
       * Classe anônima (Criou um objeto chamado Comparator):  
         
          lista.sort( new Comparator<Conta>() {
              public int compare(Conta c1, Conta c2) {
                return Integer.compare(c1.getNumero(), c2.getNumero());
              }
            });

         É melhor escrevermos da seguinte forma (lambda):         
         
         lista.sort( (c1, c2) -> Integer.compare(c1.getNumero(), c2.getNumero()));

         Exemplo de lambda em lacos (For):

          * For Tradicional

            List<String> nomes = new ArrayList<>();
            nomes.add("Super Mario");
            nomes.add("Yoshi"); 
            nomes.add("Donkey Kong"); 

            for(int i = 0; i < nomes.size(); i++) {
                System.out.println(nomes.get(i));
            }
        
          * For - lambda (Uma simples chamada em um metodo)
            
            nomes.forEach((nome) -> System.out.println(nome));

    * Como posso acessar (iterar) todas essas implementações de maneira uniforme sem saber os detalhes de cada implementação? 
    
    A resposta está na "caixa de padrões de projeto" e se chama Iterator.
    Uma Iterator é um objeto que possui no mínimo dois métodos: hasNext()e next(), Ou seja, você pode usá-lo para perguntar se existe um próximo elemento e pedir o próximo elemento. 

      * Veja o código para usar o Iterator de uma lista:

        List<String> nomes = new ArrayList<>();
        nomes.add("Super Mario");
        nomes.add("Yoshi"); 
        nomes.add("Donkey Kong"); 

        Iterator<String> it = nomes.iterator();

        while(it.hasNext()) {
          System.out.println(it.next());
        }

      * Se você entendeu esse código, você já aprendeu como iterar com filas, conjuntos ou mapas. Veja o uso do Iterator através de um conjunto:
              
        Set<String> nomes = new HashSet<>();
        nomes.add("Super Mario");
        nomes.add("Yoshi"); 
        nomes.add("Donkey Kong"); 

        Iterator<String> it = nomes.iterator();

        while(it.hasNext()) {
          System.out.println(it.next());
        }

  Java parte 7: Trabalhando com java.io

    Aula 1: Leitura com Java.io
    
    * Leitura do arquivo
        
      //Entrada do arquivo
      FileInputStream fis = new FileInputStream("lorem.txt"); 
      
      // Transformamos byte em caracteres
      CollectionsStreamReader isr = new InputStreamReader(fis);  

    * Leitura da Linha do arquivo
          
      BufferedReader br = new BufferedReader(isr);

    * Classes Abstratas e Concretas (Genericas)
    
      FileInputStream         
        É um InputStream e o InputStreamReader é um Reader. Podemos usar tipos genericos
      
        Exemplo
          InputStream fis = new FileInputStream("lorem.txt");
          Reader isr = new InputStreamReader(fis);  
          BufferedReader br = new BufferedReader(isr);

  Aula 2: Escrita com Java.io

    * Escrita do arquivo
     
      //Conexao para o arquivo de saida
       FileOutputStream fis = new FileOutputStream("lorem-saida"); 
      
      // Transformamos byte em caracteres
       OutputStreamReader isr = new OutpitStreamReader(fis);  

    * Escrever linha no arquivo
     
      BufferedWriter  bw = new BufferedWriter(osw);;
      bw.write("Teste escrita no arquivo de saida");
      bw.newLine();
      bw.close();

    * Classes Abstratas e Concretas (Genericas)
      
      * FileInputStream 
        É um OutputStream 
      
      * OutputStreamReader
        É um Writer.
        
      * Podemos usar tipos genericos

        //Gerar Arquivo    
        OutputStream fos = new FileOutputStream("Lorem-saida"); 
        
        //Transformar caracteres em byte
        Writer osw = new OutputStreamWriter(fos); 
        
        //Gravar Linha
        BufferedWriter  bw = new BufferedWriter(osw); 

  Aula 3: FileWriter e PrintStream

    * Java.io.FileWriter
      
      - Pode ser combinado com outros Writers, como BufferedWriter
      - E usado para escreveer caracteres
      - E usado para estabelecer uma saida com um arquivo

    * System.lineSeparator()
      Gera uma nova linha no arquivo de texto baseado nos caracteres do sistema operacional.
        
    * Classes para estabelecer uma mesma saida
        
      * PrintWriter (possui varios metodos para imprimir qualquer tipo de dados)
       
        PrintWriter out = new PrintWriter("NomeDoArquivo");
        out.println("Escreva o texto aqui");
        out.close();
    
      * PrintStream (Versao 1.0 do Java)
      
        PrintStream out = new PrintStream("NomeDoArquivo");
        out.println("Escreva o texto aqui");
        out.close();

  Aula 4: Usando java.util.scanner 

    * Leitura de arquivos com Scanner  (Usa o File para abrir o arquivo)
          
      Scanner sc = new Scanner(new File("NomeDoArquivo.txt"));

    * Uso de delimitador com Scanner. Metodo para separar o conteudo por um   delimitador
          
      scanner.useDelimiter(",");

    * Formatação de texto e também de números
        
      Para formatar um double e definir 3 casas decimais, precisamos fazer como abaixo:
      
        String.format("Formatando %06.3dbl", 45.3);
      
    * Definição de Localização para formatar o texto.
          
      Scanner linhaScanner = new Scanner(linha);
      linha.useLocale(Locale.US);

  Aula 5: Encoding e Charsets

    Os encodings são tabelas que transformam cada codepoint em seu caractere específico, dependendo de determinada região.

    * codePointAt()
      Classe String para revelar o codepoint de determinado caractere a partir da posicao da string
      
    * getByte()
      Metodo da classe string utilizado para transformar caractere em byte

    * StandardCharsets do pacote java.io

  Aula 6: Serialização de objetos

    * Serialização
      Transformação do objeto em um fluxo binário

    * Desserialização
      Transformação de um fluxo binário em um objeto

    * SerialVersionUID
      É boa prática colocar o atributo estático serialVersionUID na classe quando queremos serializar um objeto:

        private static final long serialVersionUID = 1L;

      O serialVersionUID define a versão atual da classe e esse valor fica gravado na representação binária do objeto. 
        Cada vez que alteramos algo incompatível na classe, devemos alterar o seu valor. 

    * NotSerializableException
      Caso alguma das classes não implemente a interface Serializable, uma exceção do tipo NotSerializableException será lançada!   

    * transient
      Existe a palavra-chave transient para indicar que o atributo não deve ser serializado

Java parte 8: Dominando as Collections

  Aula 1: Trabalhando com ArrayList

    * java.util.Collections
      A estrutura de coleções Java é um conjunto de classes e interfaces que implementam estruturas de dados de coleção comumente reutilizáveis. 
      Possui um conjunto de métodos estáticos auxiliares as coleções.
    
    * Método Sort
      Collections.sort(nomeDoCursor);conjuntoconjunto

  Aula 2: Listas de objetos

    * Diferente de uma String ou de tipos primitivos mais simples, o Collections.sort não sabe ordenar uma lista de Aula (Classe).

      1. Para comparar uma lista de classe precisamos implementar a interface Comparable na classe
          
        public class Aula implements Comparable<Aula>
        
      2. Declarar o método de comparacao
          
        @Override
        public int compareTo(Aula outrAula) {
          return this.titulo.compareTo(outrAula.getTitulo());
        }

    * Para evitar alteracoes no metodo de comparacao podemos utilizar o Comparator da seguinte forma:
          
        aulas.sort(Comparator.comparing(Aula::getTempo));
    
  Aula 3: Relacionamentos com coleções

    * Referencia ArrayList ou LinkedList
  
      O ideal é deixarmos mais genérico, utilizando a interface List.Não temos motivo para ser super específico na instância que iremos usar. Se declararmos apenas como List, poderemos mudar de implementação, como para uma LinkedList, sem problema algum de compilação, por não termos nos comprometido com uma implementação em específico.
        
    * Collections.unmodifiableList
      Quando incluimos no retorno de um metodo o Collection.unmodifiableList, deixamos a classe Imutavel

        public List<Aula> getAulas(){
          return Collections.unmodifiableList(aulas);
        }
        
    * ArrayList x LinkedList

      1. ArrayList
        Como diz o nome, internamente usa uma array para guardar os elementos

        * Vantagem
          Ela consegue fazer umas operações de maneira muito eficiente, como invocar o método get(indice). Se você precisa pegar o décimo quinto elemento, ele te devolve isso bem rápido. 

        * Desvantagem
          Quando você for, por exemplo, inserir um novo elemento na primeira posição, a implementação vai precisar mover todos os elementos que estão no começo da lista para a próxima posição. Se há muitos elementos, isso vai demorar... Chamamos isso em computação de consumo de tempo linear.  

      2.  LinkedList 
          Ela utiliza a estrutura de dados chamada lista ligada.
            
          * Vantagem
            Ela é muito rápida para adicionar e remover elementos na cabeça da lista, isso é, na primeira posição. 
            
          * Desvantagem

            Ela é lenta se você precisar acessar um determinado elemento, pois a implementação precisará percorrer todos os elementos até chegar ao décimo quinto, por exemplo.

  Aula 4: Mais práticas com relacionamentos

    * Collections.reverse()
      O método reverse() serve para inverter a ordem de uma lista. As vezes precisamos imprimir uma lista de nomes do último para o primeiro, ou uma lista de ids do maior para o menor e é nestas horas que utilizamos o reverse para inverter a ordem natural da lista para nós.

    * Collections.shuffle()
      O método shuffle() serve para embaralhar a ordem de uma lista. Por exemplo em um caso de um sistema de sorteio, em que precisamos de uma ordem aleatória na nossa lista, utilizamos o método shuffle para embaralhá-la.

    * Collections.singletonList()  
      O método singletonList() nos devolve uma lista imutável que contêm um único elemento especificado. Ele é útil quando precisamos passar um único elemento para uma API que só aceita uma Collections daquele elemento.

    * Collections.nCopies()
      O método nCopies() nos retorna uma lista imutável com a quantidade escolhida de um determinado elemento. Se temos uma lista específica e precisamos obter uma outra lista imutável , contendo diversas cópias de um destes objetos, utilizamos o método nCopies(). O bom deste método é que mesmo que nós solicitemos uma lista com um número grande, como 10000 objetos, ele na verdade se referencia a apenas um, ocupando assim um pequeno espaço.

      Este método também é utilizado para inicializar Listas recém criadas com Null, já que ele pode rapidamente criar diversos objetos, deste modo:
        
      List<Type> list = new ArrayList<Type>(Collections.nCopies(1000, (Type)null));

  Aula 5: O poder dos sets

    * java.util.Set        
      Um conjunto de elementos é apresentado através da interface java.util.Set.

      1.1 Um conjunto não aceita elementos repetidos
        Um Set garante que nenhum elemento se repete. Por isso o método add(..) devolve um booleano que indica o sucesso da inserção.

      1.2 Há métodos que fazem busca por um objeto, como contains(..) ou remove(..)que são muito mais rápidos se comparado com uma lista, isso é uma grande vantagem. Devido a implementação do Set (aquela tabela de espalhamento), o acesso aos elementos é muito rápido.

      1.3 Um conjunto não garante a ordem de inserção.Diferentemente de uma lista, um conjunto não define uma ordem. Isso significa que não recebemos os elementos na mesma ordem da inserção.
  
  Aula 6: Aplicando o Set no modelo

    * Collections.emptySet()
    
      Criando um conjunto vazio
        Set<String> nomes = Collections.emptySet();

      Nao permite addicionar informacoes sao util quando precisamos representar um curso que foi cancelado pois não teve matriculas, por exemplo. 

    * Threads 
      Uma das características mais interessantes de JVM é que ela sabe trabalhar em paralelo. Internamente isso é feito por meio de Threads que funcionam como pequenos processos dentro da JVM.

    * Collections.synchronizedSet(alunos); 
      Transforma uma coleção comum em uma coleção para threads. É justamente isso que o método faz, retorna um nova coleção que pode ser compartilhada entre threads sem perigos.

        Set<Aluno> alunosSincronizados = Collections.synchronizedSet(alunos);

  Aula 8: Outros sets e iterators

    * HashSet        
      1. É um conjunto
      2. Não aceitar elementos duplicados;
      3. Podemos realizar buscas extremamente rápidas;
      4. Não possui uma ordem previsível.

    * LinkedHashSet
      1. Uma performace similar a do HashSet
      2. Possui acesso previsível

  Aula 9: Qual Collection usar

    Provavelmente, caso a modelagem do sistema ainda não esteja bem definida, o desenvolvedor irá utilizar a interface Collection<E>. Dessa maneira, terá acesso aos métodos básicos de todas as implementações, como size(), add(), remove() e contains(). 
    
    Conforme for sentindo necessidade em algo específico, o desenvolvedor fará poucas mudanças em seu código. Caso sinta necessidade de fazer uma requisição a um elemento específico através da sua posição, trocará de Collection<E> para List<E>. Caso perceba que ordem não importa, porém é necessária uma busca bem rápida (e sem repetições), um Set<E> é mais apropriado.
    
    Enquanto não sentir essa necessidade, provavelmente a Collection<E> será a melhor escolha.

    * List vs Set   
      1. List é uma sequência e aceita elementos duplicados. 
      2. Set não aceita duplicados e não define ordem.

    * TreeSet
      * Aceita elementos ordenados
      * E não aceita duplicado        
      * A implementação TreeSet já ordena os seus elementos na hora da inserção. 
      
  Aula 10: Mapas

    1. A interface Map não implementa a interface Collection, apesar de fazer parte da API de Collections.
    2. Não podemos repetir um valor em um Map      
    3. Se repetimos uma chave, a chave repetida é sobrescrita pela nova
      Se uma chave for repetida, a antiga permanece, porém, o valor é sobrescrito pelo novo valor contido na chave passada, sendo o antigo valor "esquecido" pelo Map.
    4. A interface Map mapeia valores para chaves, ou seja, através da chave conseguimos acessar o valor
      Ela funciona da seguinte maneira, mapeia valores para chaves, e através da chave conseguimos acessar o valor correspondente. Por isso ela não pode ser repetida, ao contrário do valor, que podem existir iguais.

    * Metodo PUT
      * O método utilizado para adicionar um elemento em um Map é o método put.
      * Ele recebe dois parâmetros, a chave e o valor. 
      * Os tipos desses parâmetros dependem do que definimos na hora da instância do objeto. 
    
       Exemplo
       A) recebe como chave a matrícula do aluno e como valor o seu nome :
          
          Map<Integer, String> matriculaParaAluno = new HashMap<>();
          matriculaParaAluno.put(123456, "Leonardo Cordeiro");

    * HashMap
        Não mantém a ordem de inserção dos seus elementos. 
      
    * LinkedHashMap
        O LinkedHashMap continua nos dando a performance de um HashMap, mas com acesso previsível e ordenado, seguindo a inserção dos seus elementos.

    * Segundo o JavaDoc, um Map também pode ser visto como se fossem de 3 coleções:
      
      1. Coleção de chaves        
        Exemplo de como acessa-los:  
        
          Set<String> chaves = nomesParaIdade.keySet();    
          for (String nome : chaves) {
            System.out.println(nome);
          }

      2. Coleção de valores.      
        Exemplo de como acessa-los:  
        
          Collection<Integer> valores = nomesParaIdade.values();
          for (Integer idade : valores) {
              System.out.println(idade);
          }

      3. Coleção das associações
        Exemplo de como acessa-los:

          Set<Entry<String, Integer>> associacoes = nomesParaIdade.entrySet();
          for (Entry<String, Integer> associacao : associacoes) {
          System.out.println(associacao.getKey() + " - " + associacao.getValue());
          }

Java Servelts Fundamentos da programacao web java

  Aula 1: Fundamentos da Web e a API de Servlets

    * Apache TomCat
      1. Sabe gerar o HTML
      2. Entende o protocolo http
      3. E um servidor Web

    * Servlets      
      1. É mapeado para uma URL.
      2. É um objeto!
      3. Pode ser chamado através do protocolo HTTP.

  Aula 8: Deploy da aplicação
      
    * Deploy
      1) Gerar um arquivo WAR - Web ARchive 
      2) Export o projeto: WAR File
      3) Disponibilize o arquivo dentro da pasta do TomCat (webapps), normalmente chama Deploy
      4) Para subir no tom cat de produto
      5) No terminal acesse o a pasta do tom  cat para subir aplicacao
      6) Execute o comando: bin/startup.bat


    * TomCat rodando com a versao do java especifica
      1) Variaves de hambiente (Java_Home)
      2) Aponta para a pasta correta: java/JRE-10.0.2
      3) Alterar o path tambem, selecionando a pasta bin do java-JRE

    * Alterando a porta padrao no TomCat
      1) Alterar o arquivo server.xml que fica na pasta config (TomCa  

    * War vs Jar 
      
      WAR é o ZIP de projetos Java Web, que você roda de dentro de um servidor como o Tomcat.Possui os arquivos do mundo WEB como imagens, CSS, JS, JSP e HTML.
    
      JAR: é o ZIP para projetos comuns, que não são Web.
    
Java Servlet parte 2: Autenticação, autorização e o padrão MVC

  Aula 1: Criando o controlador
    * Controlador
      A função do controlador é receber as requisições e delegar as chamadas para as ações correspondentes.
        
  Aula 2: Padrão MVC
    * MVC significa Model-View-Controller
      
    * MVC divide a aplicação em 3 camadas lógicas. Cada camada tem a sua responsabilidade
      
    * O controlador central e as ações fazem parte da camada Controller, que define o fluxo da aplicação
        
    * Os JSPs fazem parte da camada View, que define a interface
        
    * As classes do modelo fazem parte da camada Model, que encapsula as regras de negócio
        
    * MVC facilita a manutenção e evolução da aplicação
      
    * Os JSPs devem ficar "escondidos" na pasta WEB-INF, pois dependem da ação

    Aula 4:  HttpSession
  
    * Por padrão, o navegador não envia nenhuma identificação sobre o usuário
    * Quando o Tomcat recebe uma nova requisição (sem identificação), gerará um ID
    * O ID fica salvo no cookie de nome JSessionID
    * O ID é um hash (número aleatório)
    * O cookie é anexado à resposta HTTP
    * O navegador reenvia o cookie automaticamente nas próximas requisições
    * O Tomcat gera, além do ID, um objeto chamado HttpSession
    * A vida do objeto HttpSession fica atrelado ao ID
    * Para ter acesso à HttpSession, basta chamar request.getSession()
    * Usamos a HttpSession para guardar dados sobre o usuário (login, permissões, carrinho de compra)
    * A HttpSession tem um ciclo de vida e será automaticamente invalidada

  Aula 5: Aplicando Filtros
    
    * Um Filter e Servlet são bem parecidos
    * Comparado com Servlet, o Filter tem o poder de parar o fluxo
    * Para escrever um filtro, devemos implementar a interface javax.servlet.Filter
    * Para mapear o filtro, usamos a anotação @WebFilter ou o web.xml
    * Vários filtros podem funcionar numa cadeia (um chama o próximo, mas todos são independentes)
    * Para definir a ordem de execução, devemos mapear os filtros no web.xml
    * Um filtro recebe como parâmetro, do método doFilter, um ServletRequest e um ServletResponse
    * Ambos, ServletRequest e ServletResponse, são interfaces mais genéricas do que HttpServletRequeest e HttpServletResponse
    * Para chamar o próximo filtro na cadeia, usamos o objeto FilterChain   

  Aula 6: Introdução ao Web     
    1) Um web service usa HTML, JSON ou XML como retorno
    
    2) Um web service oferece alguma funcionalidade para seu cliente
    
    3) Um web service é útil quando precisa oferecer uma funcionalidade para cliente diferentes
    
    4) Para o web service não importa se o cliente foi escrito em Java, C# ou outra linguagem, pois usamos um protocolo e formatos independentes da plataforma
    
    5) Para gerar um JSON no código Java utilizamos a biblioteca GSON
       
      * Gson - Utilizada para retornarmos um JSON para o cliente.

    6) Para gerar um XML no código Java utilizamos a biblioteca XStream
      
      * XStream - Utilizada para retornarmos um XML para o cliente.

    7) Para criar um cliente HTTP a partir do código Java, usando a biblioteca Apache HttpClient
    
      * HttpClient - Utilizada para simular uma requisição no sistema

    * API (Application Programming Interface)
      API define a interface das funcionalidades que o serviço oferece


